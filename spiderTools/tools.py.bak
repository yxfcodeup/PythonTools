#_____________________________tools.py______________________________________________
# -*- coding: utf-8 -*-

#-----------------------------------------------------------------------------------
# Name          : tools
# Version       : 1.0.0
# Author        : yxf
# Language      : Python 3.4.3
# Start time    : 2016-08-12 10:01
# End time      :
# Function      : 
# Operation     :
#-----------------------------------------------------------------------------------

import os
import sys
import re
import time
import inspect
import datetime
import multiprocessing
import getopt
import shutil
import tempfile
import random
import json
import math
import logging
import logging.config
import logging.handlers


def getCurrentFunctionName() :
    return inspect.stack()[1][3]


def getProxies(file_path) :
    if not os.path.exists(file_path) :
        print("tools.getProxies() ERROR: the file path(" + str(file_path) + ") do not exist.")
        return False 
    all_proxies = []
    with open(file_path , "r") as f :
        proxies_list = f.readlines()
        for p in proxies_list :
            p = p.replace("\n" , "").split(";")
            if 3 == len(p) :
                all_proxies.append(p)
    return all_proxies


def rotateProxies(file_path , all_proxies , ex_time=None) :
    if not os.path.exists(file_path) :
        print("tools.getProxies() ERROR: the file path(" + str(file_path) + ") do not exist.")
        return False 
    exchange_time = datetime.datetime.now().hour
    if ex_time == exchange_time :
        all_proxies = getProxies(file_path)
    proxy = None
    if len(all_proxies) > 0 :
        proxy_label = random.randint(0 , len(all_proxies)-1)
        proxy = all_proxies[proxy_label]
    return proxy


def isnumber(nstr) :
    if type(nstr) != type(str()) :
        print("tools.isnumber(): " + str(nstr) + " is not string!Cannot judge it!")
        return False
    num_str = ""
    num_dot = 0
    for i in range(len(nstr)) :
        ns = nstr[i]
        if 0==i and ("0"==ns or "."==ns) :
            return False
        if "0"!=ns and "1"!=ns and "2"!=ns and "3"!=ns and "4"!=ns and "5"!=ns\
                and "6"!=ns and "7"!=ns and "8"!=ns and "9"!=ns and "."!=ns :
            return False
        if "." == ns :
            num_dot += 1
    if num_dot > 1 :
        return False
    return True


def ping(url , times=10) :
    #ping.sh
    #> PING=`ping -c $1 $2`
    #> echo $PING
    if not os.path.exists("./ping.sh") :
        print("tools.ping() ERROR: ping.sh do not exists!")
        return False
    res = os.popen("./ping.sh " + str(times) + " " + str(url)).read()
    min_avg_max_mdev_rex = "min/avg/max/mdev = ([\d\.]{1,10}/[\d\.]{1,10}/[\d\.]{1,10}/[\d\.]{1,10}) ms"
    pac_loss_rex = "([\d\.]{1,5})% packet loss"
    min_avg_max_mdev_mh = re.findall(re.compile(min_avg_max_mdev_rex) , str(res))
    pac_loss_mh = re.findall(re.compile(pac_loss_rex) , str(res))
    if 1 != len(min_avg_max_mdev_mh) :
        print("tools.ping() ERROR!")
        print("tools.ping() ERROR: " + str(res))
        return False
    if 1 != len(pac_loss_mh) :
        print("tools.ping() ERROR!")
        print("tools.ping() ERROR: " + str(res))
        return False
    min_avg_max_mdev = str(min_avg_max_mdev_mh[0]).split("/")
    avg_time = min_avg_max_mdev[1]
    pac_loss = pac_loss_mh[0]
    if isnumber(str(avg_time)) :
        avg_time = float(avg_time)
    if isnumber(str(pac_loss)) :
        pac_loss = float(pac_loss)
    return avg_time , pac_loss


def listFormatString(in_list , separator=",") :
    if None==in_list or type(in_list)!=type(list()) or 0==len(in_list) :
        print("tools.listFormatString() ERROR: in_list is error.")
        return False
    if type(separator) != type(str()) :
        print("tools.listFormatString() ERROR: separator is not string1")
        return False
    res = ""
    stan = "{0}" + separator
    for i in range(len(in_list)) :
        res += stan.format(in_list[i])
    return res


def multiProcessGo(func=None , args_tuple=() , sep_data=None , pn_start=0 , pn_end=1) :
    #func: function name
    #args_tuple: args tuple --> (a , b , c)
    #pn_start,pn_end: unsigned int
    if None == func :
        print("tools.multiProcessGo() ERROR: func is None!")
        return False
    if type(pn_start)!=type(int()) or pn_start<0 :
        print("tools.multiProcessGo() ERROR: pn_start is error!")
        return False
    if type(pn_end)!=type(int()) or pn_end<=0 :
        print("tools.multiProcessGo() ERROR: pn_end is error!")
        return False
    process_dict = {}
    process_info_dict = {}
    if None == sep_data :
        for pn in range(pn_start , pn_end) :
            process_dict[pn] = multiprocessing.Process(target=func , args=args_tuple+(pn,))
            process_info_dict[pn] = {
                    "function_name":func.__name__ , 
                    "function_args":args_tuple+(pn , ) ,
                    }
            print("Start process[" + str(pn) + "]: " + str(func.__name__) + str(args_tuple+(pn,)))
        for pn,p in process_dict.items() :
            p.daemon = True
            p.start()
        for pn,p in process_dict.items() :
            p.join()
    elif type(sep_data)!=type(list()) or len(sep_data)<(pn_end - pn_start) :
        print("tools.multiProcessGo() ERROR: sep_data is error!sep_data must be a list and the length must be equal to (pn_end-pn_start)!")
        return False
    else :
        i = 0
        for pn in range(pn_start , pn_end) :
            process_dict[pn] = multiprocessing.Process(target=func , args=args_tuple + (sep_data[i] , pn))
            process_info_dict[pn] = {
                    "function_name":func.__name__ , 
                    "function_args":args_tuple+(sep_data[i] , pn) ,
                    }
            print("Start process[" + str(pn) + "]: " + str(func.__name__) + str(args_tuple+("sep_data" , pn)))
            i += 1
        for pn,p in process_dict.items() :
            p.daemon = True
            p.start()
        for pn,p in process_dict.items() :
            p.join()


if __name__ == "__main__" :
    #print(ping("www.baidu.com"))
    s = ["604","机械",60401,"行业网站","http://www.shjinghao.com","景豪机械",44]
    print(listFormatString(s , "\t"))
